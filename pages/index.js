import Head from 'next/head'
import Sidebar from "../components/Sidebar";
import Feed from "../components/Feed";
import Rightbar from "../components/Rightbar";
import Feature from '../components/Feature';
import Contact from '../components/Contact';
import Contest from '../components/Contest';
import { ScrollToTop } from '../components/ScrollToTop';
import Footer from '../components/Footer';
import React, { useContext, useState } from "react";
import { Box, Pagination, Stack, Typography, styled, createTheme } from "@mui/material";
import db from "../utils/db";
import Product from "../models/Product";
import { useRouter } from "next/router";
import { Store } from "../utils/Store";
import axios from "axios";
import Singlecard from "../components/Singlecard";
import toast from "react-hot-toast";




export default function Home(props) {

  const { products, categories, countProducts, featuredProducts, drinkProducts } = props;
  const [open, setOpen] = React.useState(false);

  const handleOpen = () => setOpen(true);

  const { state, dispatch } = useContext(Store);
  const router = useRouter();



  const addToCartHandler = async (product) => {
    const existItem = state.cart.cartItems.find((x) => x._id === product._id);
    const quantity = existItem ? existItem.quantity + 1 : 1;

    const { data } = await axios.get(`/api/products/${product._id}`);

    if (data.countInStock < quantity) {
      toast.error("Sorry. Product is out of stock", { duration: 4000, position: "bottom-center" });
      return;
    }
    dispatch({ type: "CART_ADD_ITEM", payload: { ...product, quantity } });
  };

  //pagination
  const [currentPage, setCurrentPage] = useState(1);
  const [exercisesPerPage] = useState(6);
  const indexOfLastExercise = currentPage * exercisesPerPage;
  const indexOfFirstExercise = indexOfLastExercise - exercisesPerPage;
  const currentExercises = products.slice(
    indexOfFirstExercise,
    indexOfLastExercise
  );

  const paginate = (event, value) => {
    event.preventDefault(),
    setCurrentPage(value);
    
  };
  //Category***********

  const { category = "all", price = "all", sort = "featured" } = router.query;
  const { query } = router;

  const filterSearch = ({ category, price, min, max, sort, search }) => {
    const path = router.pathname;
    const { query } = router;
    if (category) query.category = category;
    if (price) query.price = price;
    if (sort) query.sort = sort;
    if (min) query.min ? query.min : query.min === 0 ? 0 : min;
    if (max) query.max ? query.max : query.max === 0 ? 0 : max;
    if (search) query.search = search;
    router.push({
      pathname: path,
      query: query,
    });
  };
  const categoryHandler = (e) => {
    filterSearch({ category: e.target.value });
  };
  const priceHandler = (e) => {
    filterSearch({ price: e.target.value });
  };
  const sortHandler = (e) => {
    filterSearch({ sort: e.target.value });
  };
  const queryChangeHandler = (e) => {
    filterSearch({ search: e.target.value });
  };


  const theme = createTheme({
    background: {
    color:'#161d28'
    
    },
  });


  return (
    <>
      <Head>
        <title>Fitness Center</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <Box>
          <Feed />
          <Stack direction="row" spacing={2} justifyContent="space-between">
            <Sidebar />
            <Box flex={6} p={{ xs: 0, md: 2 }}>
              <Feature />
              <Box  >
              <Typography variant="h4" mb={0} align="center" >Top Exercises {" "}</Typography>
              <Typography variant="h5" pb={2} align="center" color="#cf441f" >- Test Your Might -{" "}</Typography>          
                <Stack direction="row" flexWrap="wrap" justifyContent="center" sx={{ gap: { lg: "5px", xs: "5px" } }}>
                  {currentExercises
                    .map((product, id) => (
                      <StyledGrid align="center" key={product.slug}>
                        <Singlecard key={id} product={product} addToCartHandler={addToCartHandler} />
                      </StyledGrid>))}
                </Stack>
                  
                <Pagination defaultPage={1} page={currentPage} onChange={paginate} size="large"
                  shape="rounded" showFirstButton showLastButton count={Math.ceil(products.length / exercisesPerPage)}
                  sx={{ margin: "2rem" }} />
                  
              </Box>

              <Contest />
              <Footer />
              <Contact />
            </Box>
            <Rightbar />
          </Stack>
          <ScrollToTop />
        </Box>
     
    </>
  )
}
export async function getServerSideProps({ query }) {


  await db.connect();
  // Today's Specials

  const featuredProductsDocs = await Product.find({ isFeature: "true" }, "-reviews")
    .lean()
    .limit(6);

  //Winnes
  const drinkProductsDocs = await Product.find({ countInStock: "777" }, "-reviews")
    .lean()
    .limit(3);

  const pageSize = query.pageSize;
  const page = query.page || 1;
  const category = query.category || "";
  const price = query.price || "";
  const rating = query.rating || "";
  const sort = query.sort || "";
  const searchQuery = query.query || "";

  const queryFilter =
    searchQuery && searchQuery !== "all"
      ? {
        name: {
          $regex: searchQuery,
          $options: "i",
        },
      }
      : {};
  const categoryFilter = category && category !== "all" ? { category } : {};

  const ratingFilter =
    rating && rating !== "all"
      ? {
        rating: {
          $gte: Number(rating),
        },
      }
      : {};
  // 10-50
  const priceFilter =
    price && price !== "all"
      ? {
        price: {
          $gte: Number(price.split("-")[0]),
          $lte: Number(price.split("-")[1]),
        },
      }
      : {};

  const order =
    sort === 'featured'
      ? { featured: -1 }
      : sort === 'lowest'
        ? { price: 1 }
        : sort === 'highest'
          ? { price: -1 }
          : sort === 'toprated'
            ? { rating: -1 }
            : sort === 'newest'
              ? { createdAt: -1 }
              : { _id: -1 };

  const categories = await Product.find().distinct("category");

  const productDocs = await Product.find(
    {
      ...queryFilter,
      ...categoryFilter,
      ...priceFilter,
      ...ratingFilter,
    },
    "-reviews"
  )
    .sort(order)
    .skip(pageSize * (page - 1))
    .limit(25, pageSize)
    .lean();

  const countProducts = await Product.countDocuments({
    ...queryFilter,
    ...categoryFilter,
    ...priceFilter,

    ...ratingFilter,
  });

  const countCategory = await Product.countDocuments({
    ...categoryFilter,
  });

  const products = JSON.parse(JSON.stringify(productDocs));
  const featuredProducts = JSON.parse(JSON.stringify(featuredProductsDocs));
  const drinkProducts =  JSON.parse(JSON.stringify(drinkProductsDocs));

  return {
    props: {
      products,
      countProducts,
      countCategory,
      page,
      pages: Math.ceil(countProducts / pageSize),
      categories,
      featuredProducts,
      drinkProducts,
 

    },
  };
}
const StyledGrid = styled("div")(({ theme }) => ({
  padding: "20px",
  borderRadius: "8px",
  /*  boxShadow: "2px 2px 5px #babecc, -5px -5px 10px #ffffff73", */
  display: "grid",
  gridTemplateColumns: "repeat(auto-fill, minmax(290px, 1fr))",
  justifyContent: "center",
  margin: "10px 0",
  alignContent: "center"
})); 